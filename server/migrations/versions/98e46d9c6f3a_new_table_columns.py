# """new table columns

# Revision ID: 98e46d9c6f3a
# Revises: 490477f08582
# Create Date: 2025-01-15 16:23:23.186104

# """
# from alembic import op
# import sqlalchemy as sa
# from models import GenderOption
# from sqlalchemy.dialects.postgresql import ENUM


# # revision identifiers, used by Alembic.
# revision = '98e46d9c6f3a'
# down_revision = '490477f08582'
# branch_labels = None
# depends_on = None


# def upgrade():
#     # Create the enum type in the database if it doesn't already exist

#     op.execute("""
#         DO $$
#         BEGIN
#             IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'genderoption') THEN
#                 CREATE TYPE genderoption AS ENUM ('Male', 'Female', 'Not specified');
#             END IF;
#         END
#         $$;
#         """)

#     # ### commands auto generated by Alembic - please adjust! ###
#     with op.batch_alter_table('patient_bills', schema=None) as batch_op:
#         batch_op.add_column(sa.Column('patient_gender', sa.Enum('Male', 'Female', 'Not specified', name='genderoption', native_enum = True), nullable=False))
#         batch_op.add_column(sa.Column('patiend_age', sa.Integer(), nullable=False))
#         batch_op.add_column(sa.Column('patient_contact', sa.String(), nullable=False))

#     # ### end Alembic commands ###


# def downgrade():
#     # ### commands auto generated by Alembic - please adjust! ###
#     with op.batch_alter_table('patient_bills', schema=None) as batch_op:
#         batch_op.drop_column('patient_contact')
#         batch_op.drop_column('patiend_age')
#         batch_op.drop_column('patient_gender')

#     # ### end Alembic commands ###

"""new table columns

Revision ID: 98e46d9c6f3a
Revises: 490477f08582
Create Date: 2025-01-15 16:23:23.186104

"""
from alembic import op
import sqlalchemy as sa
from models import GenderOption
from sqlalchemy.dialects.postgresql import ENUM


# revision identifiers, used by Alembic.
revision = "98e46d9c6f3a"
down_revision = "490477f08582"
branch_labels = None
depends_on = None


def upgrade():
    # Define the GenderOption enum
    gender_enum = ENUM(
        "Male", "Female", "Not specifies", name="genderoption", native_enum=True
    )
    # Create the enum type in the database if it doesn't already exist

    op.execute(
        """
        DO $$
        BEGIN
            IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'genderoption') THEN
                CREATE TYPE genderoption AS ENUM ('Male', 'Female', 'Not specified');
            END IF;
        END
        $$;
        """
    )

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("patient_bills", schema=None) as batch_op:
        batch_op.add_column(sa.Column("patient_gender", gender_enum, nullable=False))
        batch_op.add_column(sa.Column("patiend_age", sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column("patient_contact", sa.String(), nullable=False))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("patient_bills", schema=None) as batch_op:
        batch_op.drop_column("patient_contact")
        batch_op.drop_column("patiend_age")
        batch_op.drop_column("patient_gender")

    # ### end Alembic commands ###
